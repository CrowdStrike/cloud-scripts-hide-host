---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CrowdStrike Hide Host Automation Template'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: CrowdStrike Falcon API Keys
        Parameters:
          - CrowdStrikeCloud
          - CreateAPISecret
          - FalconClientID
          - FalconSecret
          - SSMClientID
          - SSMSecret
      - Label:
          default: Activate Regions
        Parameters:
          - ActivateRegions
      - Label:
          default: Define Resource Names
        Parameters:
          - SecretName
          - LambdaFunctionName
          - EventBusName
          - EventBridgeRuleName
          - EventBridgeRoleName
          - StackSetName
          - StackSetAdminRole
          - StackSetExecRole
    ParameterLabels:
      CrowdStrikeCloud:
        default: Your CrowdStrike Falcon CLoud
      CreateAPISecret:
        default: Create Secret for API Keys
      SecretName:
        default: Name of Secret to store Falcon API Keys
      FalconClientID:
        default: Your Falcon API Client ID
      FalconSecret:
        default: Your Falcon API Secret
      SSMClientID:
        default: Name of SSM Parameter to store Falcon API Client ID
      SSMSecret:
        default: Name of SSM Parameter to store Falcon API Client Secret
      ActivateRegions:
        default: Activate regions to deploy EventBridge rules
      LambdaFunctionName:
        default: Lambda Function Name
      EventBusName:
        default: Event Bus Name
      EventBridgeRuleName:
        default: EventBridge Rule Name      
      EventBridgeRoleName:
        default: EventBridge Role Name
      StackSetName:
        default: EventBridge Rule StackSet Name
      StackSetAdminRole:
        default: StackSet Admin Role Name
      StackSetExecRole:
        default: StackSet Execution Role Name

Parameters:
  ActivateRegions:
    Description: Comma Delimited List of AWS Regions to enable CrowdStrike Hide Host
    Type: CommaDelimitedList
    Default: 'us-west-2,us-east-1,us-east-2'
  EventBusName:
    Description: Name of EventBus in primary region to ingest EventBridge events across regions
    Type: String
    Default: 'cs-hide-host-bus'
  EventBridgeRuleName:
    Description: Name of EventBridge Rules in each region
    Type: String
    Default: 'cs-hide-host-rule'
  EventBridgeRoleName:
    Description: Name of EventBridge Role to enable cross-region events
    Type: String
    Default: 'cs-hide-host-role'
  LambdaFunctionName:
    Description: Name of CrowdStrike Hide Host Lambda Function
    Type: String
    Default: 'cs-hide-host-function'
  StackSetName:
    Description: Name of the StackSet that creates EventBridge Rules
    Type: String
    Default: 'cs-hide-host-stackset'
  StackSetAdminRole:
    Description: Administration Role for CrowdStrike Hide Host Automation EB StackSet
    Type: String
    Default: 'CrowdStrikeStackSetAdministrationRole'
  StackSetExecRole:
    Description: Execution Role for CrowdStrike Hide Host Automation EB StackSet
    Type: String
    Default: 'CrowdStrikeStackSetExecutionRole'
  CreateAPISecret:
    Type: String
    Description: If true, provide your Falcon API Keys to be stored in AWS Secrets Manager.  If false, provide SSM Parameter names where Falcon API Keys are already stored.  
     Please Note, this Cloudformation does not create secure SSM Parameters, if you choose false, you must have already created the SSM Parameters to store you Falcon API Keys.
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  SecretName:
    Description: If Create Secret for API Keys = true, the name of your new AWS Secret to store Falcon API keys.
    Type: String
    Default: 'cs-hide-host-secret'
  FalconClientID:
    Description: If Create Secret for API Keys = true, your Falcon OAuth2 Client ID.
    NoEcho: 'true'
    Type: String
    Default: ''
  FalconSecret:
    Description: If Create Secret for API Keys = true, your Falcon OAuth2 API Secret.
    NoEcho: 'true'
    Type: String
    Default: ''
  CrowdStrikeCloud:
    Description: The CrowdStrike Cloud for your Falcon CID. Example us-1, us-2 or eu-1.
    AllowedValues:
      - 'us-1'
      - 'us-2'
      - 'eu-1'
    Type: String
    Default: 'us-1'
  SSMClientID:
    Description: If Create Secret for API Keys = false, your AWS SSM Parameter Name where Falcon OAuth2 Client ID is stored.
    Type: String
  SSMSecret:
    Description: If Create Secret for API Keys = false, your AWS SSM Parameter Name where Falcon OAuth2 API Secret is stored.
    Type: String
  
Conditions:
  CreateSecret: !Equals [ !Ref 'CreateAPISecret', true ]

Resources:
  StackSetAdministrationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref StackSetAdminRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: cloudformation.amazonaws.com
          Effect: Allow
          Sid: ''
      Policies:
        - PolicyName: crowdstrike-stackset-execution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: sts:AssumeRole
                Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${StackSetExecRole}
                Effect: Allow

  StackSetExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: StackSetAdministrationRole
    Properties:
      RoleName: !Ref StackSetExecRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: sts:AssumeRole
          Principal:
            AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${StackSetAdminRole}
          Effect: Allow
          Sid: ''
      Policies:
        - PolicyName: crowdstrike-stackset-execution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - events:DeleteRule
                - events:PutTargets
                - events:DescribeRule
                - iam:PassRole
                - events:EnableRule
                - events:PutRule
                - events:RemoveTargets
                - events:DisableRule
                Resource:
                - !Sub arn:${AWS::Partition}:events:*:*:rule/${EventBridgeRuleName}*
                - !Sub arn:${AWS::Partition}:events:*:*:rule/*/${EventBridgeRuleName}*
                - !Sub arn:${AWS::Partition}:iam::*:role/${EventBridgeRoleName}
                Effect: Allow
              - Action: cloudformation:*
                Resource: '*'
                Effect: Allow

  EventBus:
    Type: AWS::Events::EventBus
    Properties: 
      Name: !Ref EventBusName

  PrimaryEbRule:
    Type: AWS::Events::Rule
    DependsOn: EventBus
    Properties: 
      Name: !Ref EventBridgeRuleName
      EventBusName: !Ref EventBusName
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state:
            - terminated
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn 
          Id: 'cslam'

  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref EventBridgeRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: events.amazonaws.com
          Effect: Allow
          Sid: ''
      Policies:
        - PolicyName: crowdstrike-invoke-eventbus
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: events:PutEvents
                Resource: !GetAtt EventBus.Arn
                Effect: Allow

  EbStackSet:
    Type: 'AWS::CloudFormation::StackSet'
    Properties:      
      StackSetName: !Ref StackSetName
      AdministrationRoleARN: !GetAtt StackSetAdministrationRole.Arn
      ExecutionRoleName: !Ref StackSetExecutionRole
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets: 
            Accounts:
              - !Sub ${AWS::AccountId}
          Regions: !Ref ActivateRegions
      Parameters:
        - ParameterKey: RuleName
          ParameterValue: !Sub '${EventBridgeRuleName}-${AWS::Region}'
        - ParameterKey: Target
          ParameterValue: !GetAtt EventBus.Arn
        - ParameterKey: RoleArn
          ParameterValue: !GetAtt EventBridgeRole.Arn
      TemplateBody: |
        ---
        AWSTemplateFormatVersion: 2010-09-09
        Description: Create EventBridge Rules to enable CrowdStrike Falcon CSPM
        Parameters:
          RuleName:
            Description: Event Bridge Rule Name
            Type: String
            Default: ''
          Target:
            Description: Target Event Bus Arn
            Type: String
            Default: ''
          RoleArn:
            Description: Role Arn
            Type: String
            Default: ''
        Resources:
          CrowdStrikeEventBusRule: 
            Type: AWS::Events::Rule
            Properties:
              Name: !Ref RuleName
              EventPattern:
                source:
                  - aws.ec2
                detail-type:
                  - EC2 Instance State-change Notification
                detail:
                  state:
                    - terminated
              State: ENABLED
              Targets:
                - Arn: !Ref Target
                  Id: "csbus"
                  RoleArn: !Ref RoleArn

  CrowdStrikeSecret:
    Condition: CreateSecret
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: CrowdStrike Falcon API Keys
      Name: !Ref SecretName
      SecretString:
        Fn::Join:
          - ''
          - - '{"FalconClientId":"'
            - Ref: "FalconClientID"
            - '","FalconSecret": "'
            - Ref: FalconSecret
            - '"}'

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: { }
      Path: /
      Policies:
        - PolicyName: CrowdStrikeApiPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:secretsmanager:*:${AWS::AccountId}:secret:${SecretName}*'
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:*:${AWS::AccountId}:parameter/${SSMClientID}'
                  - !Sub 'arn:${AWS::Partition}:ssm:*:${AWS::AccountId}:parameter/${SSMSecret}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSOrganizationsReadOnlyAccess'
  
  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionName
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PrimaryEbRule.Arn

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:      
      Environment:
        Variables:
          CSCloud: !Ref CrowdStrikeCloud
          SecretRegion: !Ref AWS::Region
          SecretName: !If [CreateSecret, !Ref SecretName, "disabled"]
          SsmClientName: !If [CreateSecret, "disabled", !Ref SSMClientID]
          SsmSecretName: !If [CreateSecret, "disabled", !Ref SSMSecret]
          UseSecretStore: !Ref CreateAPISecret
      FunctionName: !Ref LambdaFunctionName
      Description: Removes Instances from CrowdStrike upon termination
      Handler: index.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Role: !GetAtt LambdaFunctionRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          """
          CrowdStrike Hide Host Lambda Function

          ______                         __ _______ __         __ __
          |      |.----.-----.--.--.--.--|  |     __|  |_.----.|__|  |--.-----.
          |   ---||   _|  _  |  |  |  |  _  |__     |   _|   _||  |    <|  -__|
          |______||__| |_____|________|_____|_______|____|__|  |__|__|__|_____|

          Falcon Hide Host Lambda Function v1.0

          Creation date: 05.01.23 - ryanjpayne@CrowdStrike
          """

          import json
          import boto3
          import subprocess
          import os
          import sys
          import base64
          from botocore.exceptions import ClientError


          # pip install falconpy package to /tmp/ and add to path
          subprocess.call('pip install crowdstrike-falconpy -t /tmp/ --no-cache-dir'.split(), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
          sys.path.insert(1, '/tmp/')
          try:
              from falconpy import OAuth2, SensorDownload, Hosts
          except ImportError as no_falconpy:
              raise SystemExit("Unable to import CrowdStrike SDK. Check automation layer contents.") from no_falconpy


          def get_secret(secret_name, secret_region):
              # Create a Secrets Manager client
              session = boto3.session.Session()
              client = session.client(
                  service_name='secretsmanager',
                  region_name=secret_region
              )
              try:
                  get_secret_value_response = client.get_secret_value(
                      SecretId=secret_name
                  )
              except ClientError as e:
                  if e.response['Error']['Code'] == 'DecryptionFailureException':
                      # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
                      raise e
                  elif e.response['Error']['Code'] == 'InternalServiceErrorException':
                      # An error occurred on the server side.
                      raise e
                  elif e.response['Error']['Code'] == 'InvalidParameterException':
                      # You provided an invalid value for a parameter.
                      raise e
                  elif e.response['Error']['Code'] == 'InvalidRequestException':
                      # You provided a parameter value that is not valid for the current state of the resource.
                      raise e
                  elif e.response['Error']['Code'] == 'ResourceNotFoundException':
                      # We can't find the resource that you asked for.
                      raise e
              else:
                  # Decrypts secret using the associated KMS key.
                  # Depending on whether the secret is a string or binary, one of these fields will be populated.
                  if 'SecretString' in get_secret_value_response:
                      secret = get_secret_value_response['SecretString']
                  else:
                      secret = base64.b64decode(get_secret_value_response['SecretBinary'])
                  return secret

          def get_ssm_params(ssm_client_name, ssm_secret_name, secret_store_region):
              """Retrieve the stored configuration parameters from SSM Parameter Store."""
              ssm = boto3.client('ssm', region_name=secret_store_region)

              print('Fetching APIGatewayClientIDKey')
              apiGatewayClientIDResponse = ssm.get_parameter(Name=ssm_client_name, WithDecryption=True)
              if apiGatewayClientIDResponse['ResponseMetadata']['HTTPStatusCode'] != 200:
                  raise ValueError(f"Required property {ssm_client_name} not found")

              cust_id = apiGatewayClientIDResponse['Parameter']['Value']

              print('Fetching APIGatewayClientSecretKey')
              apiGatewayClientSecretResponse = ssm.get_parameter(Name=ssm_secret_name, WithDecryption=True)
              if apiGatewayClientSecretResponse['ResponseMetadata']['HTTPStatusCode'] != 200:
                  raise ValueError(f"Required property {ssm_secret_name} not found")

              cust_secret = apiGatewayClientSecretResponse['Parameter']['Value']

              return cust_id, cust_secret
              
          ssm_client_name = os.environ['SsmClientName']
          ssm_secret_name = os.environ['SsmSecretName']
          use_secret_store = os.environ['UseSecretStore']
          secret_store_name = os.environ['SecretName']
          secret_store_region = os.environ['SecretRegion']
          cs_cloud = os.environ['CSCloud']

          if use_secret_store == "true":
              print("Retrieving API keys from secrets...")
              secret_str = get_secret(secret_store_name, secret_store_region)
              secrets_dict = json.loads(secret_str)
              FalconClientId = secrets_dict['FalconClientId']
              FalconSecret = secrets_dict['FalconSecret']
          elif ssm_client_name:
              print("Retrieving API keys from parameter store...")
              FalconClientId, FalconSecret = get_ssm_params(ssm_client_name, ssm_secret_name, secret_store_region)

          def lambda_handler(event, context):
              print(event)
              instance = event['detail']['instance-id']
              print('Hiding Instance ID: ' + instance)

              """Hide the host from the Falcon Console."""
              try:
                  print("Hiding terminated instance in Falcon")
                  hosts = Hosts(client_id=FalconClientId,
                              client_secret=FalconSecret,
                              base_url=cs_cloud
                              )

                  host_aid = hosts.query_devices_by_filter(filter=f"instance_id:'{instance}'")

                  if host_aid["status_code"] != 200:
                      returned = f"AWS instance: {instance} was not found in your Falcon tenant"

                  if host_aid["body"]["resources"]:
                      falcon_host_id = host_aid["body"]["resources"][0]
                      hide_result = hosts.perform_action(action_name="hide_host", ids=falcon_host_id)
                      if hide_result["status_code"] == 202:
                          returned = (
                              f"AWS Instance: {instance} | Falcon Resource ID: {falcon_host_id} was "
                              "successfully hidden"
                          )
                      elif hide_result["status_code"] == 404:
                          returned = (
                              f"AWS Instance: {instance} does not have a sensor installed."
                          )
                      else:
                          err_detail = hide_result["body"]["errors"][0]
                          code = err_detail["code"]
                          msg = err_detail["message"]
                          raise ValueError(f"Received non success response {code} while attempting to hide host. Error: {msg}")

                  else:
                      returned = f"AWS instance: {instance} was not found in your Falcon tenant"

                  return returned
              except Exception as err:
                  raise ValueError(f"Failure while interacting with CrowdStrike backend. Error {err}") from err